#!/bin/bash

set -e

function msg() {
  echo "*** $*"
}

## Validations ##

# Check the time, add warning if deploying after 5PM or before 9AM
hour=$(date +"%-H")
if ((hour >= 17)) || ((hour < 9)); then
  confirming_message="I really want to deploy after hours and will be responsible for the consequences."
  msg "Are you sure you want to deploy? It's quite late in the day!"
  msg "If you are really sure type the following:"
  msg "$confirming_message"
  read typed_message
  if [[ $typed_message != $confirming_message ]]; then
    msg "Messages did not match, aborting deploy."
    exit 1
  fi
fi

# TODO: Check that hub is available to use

## Parse input options ##

commit=""
release_title="New enterprise-app release"
semver="patch"

# From: https://stackoverflow.com/a/39398359
# As long as there is at least one more argument, keep looping
while [[ $# -gt 0 ]]; do
  key="$1"
  case "$key" in
  # Syntax help
  -h | --help)
    cat <<HELP
Usage: bin/deploy_to_production [-c | --commit <commit hash>]
                                [-m | --message <release message>]
                                [-s | --semver-type <patch (default) | minor | major>]
                                [-h | --help]
HELP
    exit 0
    ;;
  # Specify commit to release
  -c | --commit)
    shift
    commit="$1"
    ;;
  # Specify the release title to use
  -m | --message)
    shift
    release_title="$1"
    ;;
  # Set whether the release is a major, minor or patch version
  -s | --semver-type)
    shift
    semver="$1"
    if [[ $semver != "patch" || $semver != "minor" || $semver != "major" ]]; then
      msg "semver-type needs to be one of [patch, major, minor]"
      exit 1
    fi
    ;;
  *)
    # Do whatever you want with extra options
    echo "Unknown option: '$key'"
    exit 1
    ;;
  esac
  # Shift after checking all the cases to get the next option
  shift
done

echo "commit=$commit"
echo "release_title=$release_title"
echo "semver=$semver"

# Checkout master if not yet done
branch_name=$(git symbolic-ref -q HEAD)
branch_name=${branch_name##refs/heads/}
branch_name=${branch_name:-HEAD}
if [[ $branch_name != "master" ]]; then
  msg "Checking out master"
  git checkout master
fi

# pull master
msg "Pulling master"
git pull

# Make errors not fail the script, because if the deployed_tag command fails we want to continue
set +e
# Check if latest commit is already deployed
deployed_tag=$(git describe --exact-match --tags HEAD 2>/dev/null)
# $? stores the exit code of the last runned command
if [[ $? == 0 ]]; then
  msg "Latest commit on master is already deployed with tag $deployed_tag"
  exit 1
fi

# Make errors fail the script again (so undo set +e)
set -e

# git fetch --tags

# Get the most recent tag from git
most_recent_tag=$(git describe --tags --abbrev=0)
# Delete the first character (the v)
most_recent_version=${most_recent_tag:1}
# Split the tag in array for each number, so 1.2.3 -> [1, 2, 3]
IFS='.' read -r -a current_version <<<"$most_recent_version"

new_tag="v"

# Decide based on the options what the new tag will look like
if [[ $semver == "major" ]]; then
  new_major=$((current_version[0] + 1))
  new_tag="$new_tag$new_major.0.0"
fi

if [[ $semver == "minor" ]]; then
  new_minor=$((current_version[1] + 1))
  new_tag="$new_tag${current_version[0]}.$new_minor.0"
fi

if [[ $semver == "patch" ]]; then
  new_patch=$((current_version[2] + 1))
  new_tag="$new_tag${current_version[0]}.${current_version[1]}.$new_patch"
fi

release_commits=$(git log --pretty="* %s (%an)" $(git describe --tags --abbrev=0 @^)..@)

release_message=$(
  cat <<END_HEREDOC
$release_title

$release_commits
END_HEREDOC
)

echo "$release_message"

msg "Releasing $new_tag to production"

if [[ $commit ]]; then
  hub release create -t $commit -m "$release_message" $new_tag
else
  hub release create -m "$release_message" $new_tag
fi

base_url="https://github.$(git config remote.origin.url | cut -f2 -d. | tr ':' /)"
msg "Deploy started, new changes in this deploy: $base_url/compare/$most_recent_tag...$new_tag"
